buildscript {
  println("Building with Bb API [${bbLearnVersion}] ");

  repositories {
    mavenCentral()
  }

  dependencies {
    // Needed for pre-compiling the JSPs
    classpath "com.bmuschko:gradle-tomcat-plugin:${gradleTomcatPluginVersion}"
  }
}

plugins {
  id 'nebula.lint' version '17.3.2'
}

allprojects {
  apply plugin: "java"
  apply plugin: "war"
  apply plugin: "com.bmuschko.tomcat"
  apply plugin: 'nebula.lint'

  repositories {
    mavenCentral()
    maven {
      url "https://maven.blackboard.com/content/repositories/releases/"
    }
  }

  group = 'org.apereo.openequella.integration.blackboard'
  version = artifactVersion

  gradleLint.rules = ['all-dependency', 'dependency-parentheses', 'duplicate-dependency-class']

  dependencies {
    providedCompile( "blackboard.platform:bb-platform:${bbLearnVersion}" ) { transitive = false }
    providedCompile( "blackboard.platform:bb-cms-admin:${bbLearnVersion}" ) { transitive = false }
    providedCompile "javax.servlet:javax.servlet-api:${servletApiVersion}";
    providedCompile "javax.servlet.jsp:javax.servlet.jsp-api:${jspApiVersion}";
    implementation group: 'commons-httpclient', name: 'commons-httpclient', version: '3.1'
    implementation group: 'log4j', name: 'log4j', version: '1.2.17'
    implementation group: 'org.apache.cxf', name: 'cxf-bundle', version: '2.7.18'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.3'
    implementation group: 'org.apache.struts', name: 'struts-taglib', version: '1.3.10'
    implementation group: 'org.jsoup', name: 'jsoup', version: '1.15.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.1-jre'
    implementation group: 'javax.jws', name: 'javax.jws-api', version: '1.1'

    // Use JUnit test framework
    testImplementation "junit:junit:${junitVersion}"

    // Needed to precompile the JSPs.
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
      "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
      "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}",
      "blackboard.platform:bb-taglibs:${bbLearnVersion}",
      "blackboard.platform:bb-platform:${bbLearnVersion}",
      "javax.servlet:jstl:${jstlVersion}"
  }

  task buildWar (type: War, dependsOn: tomcatJasper) {
    // Due to the tomcat embed and other deps being hardset on the classpath,
    // we need to remove the unneeded ones.  This is not as clean as hoped,
    // but keeps out unwanted jars from the war.
    classpath = classpath.filter { file ->
      (
        !file.name.startsWith('jetty-') &&
        !file.name.startsWith('geronimo-') &&
        !file.name.startsWith('spring-') &&
        !file.name.startsWith('serializer-')
      )
    }

    from 'build/jsps/org/apache/jsp' // include the pre-compiled JSPs
    from ('src/main/manifests/bb-manifest-unresolved.xml'){ // set the B2 version and place in the war
      filter{ it.replaceAll('@VERSION@', artifactVersion)}
      rename { String fileName ->
        fileName.replace("-unresolved", "")
      }
      into("WEB-INF")
    }
    from ('src/main/properties/version-unresolved.properties'){ // set the B2 version and place in the war
      filter{ it.replaceAll('@VERSION@', artifactVersion)}
      rename { String fileName ->
        fileName.replace("-unresolved", "")
      }
      into(".")
    }
    from ('src/main/java/icons.xml') {
      into("WEB-INF/classes")
    }
  }

  tomcat {
    jasper {
      validateXml = true
      outputDir = file("build/jsps")
    }
  }
}

project(':oeqAuditB2') {
  dependencies {
    implementation project(':oeqCommon')
  }

  task buildB2() {
    group 'oEQ'
    description 'Precompiles the JSPs, compiles the source, and packages the building block as a WAR'
    dependsOn buildWar
  }
}

project(':oeqPrimaryB2') {
  dependencies {
    implementation project(':oeqCommon')
  }

  task buildB2() {
    group 'oEQ'
    description 'Precompiles the JSPs, compiles the source, and packages the building block as a WAR'
    dependsOn buildWar
  }
}

project(':oeqLinkMigrationLTI') {
  dependencies {
    implementation project(':oeqCommon')
  }

  task buildLinkMigration() {
    group 'oEQ'
    description 'Precompiles the JSPs, compiles the source, and packages the building block as a WAR'
    dependsOn clean, test, buildWar
  }
}

project(':oeqPrimaryWS') {
  dependencies {
    implementation project(':oeqCommon')
  }

  task generateJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
  }

  task zipJavadoc(type: Zip, dependsOn: generateJavadoc) {
    archiveFileName = 'documentation.zip'
    destinationDirectory = buildDir
    from ("${buildDir}/docs/javadoc") {
      into 'documentation'
    }
  }

  task buildWS(type: Jar) {
    dependsOn classes
    dependsOn zipJavadoc
    group 'oEQ'
    description 'Compiles the source and packages the web service as a JAR'
    archiveBaseName = 'oeq-blackboard-primary-ws'
    with jar
    from (project(':oeqCommon').sourceSets.main.output) // Include the common classes as well.
    from ('src/main/manifests/bb-manifest.xml'){ // set the B2 version and place in the war
      into("META-INF")
    }
    from ('src/main/java/icons.xml')
    from ("${buildDir}/documentation.zip")
  }
}
